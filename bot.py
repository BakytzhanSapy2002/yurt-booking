from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from sheets_api import get_availability, add_booking, list_bookings, delete_booking_by_id, get_next_available, edit_booking
from datetime import timedelta
from telegram import Update

# Telegram ID ‚Äì —Ç–µ–∫ –∞–¥–º–∏–Ω “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞–¥—ã
ADMIN_ID = **********  # <-- ”®–∑ ID-“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑

BOT_TOKEN = "*******************"
def get_help_text(user_id):
    if user_id == ADMIN_ID:
        return (
            "–°”ô–ª–µ–º, –∞–¥–º–∏–Ω! üòä\n\n"
            "üõ† *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã*:\n"
            "/add\\_booking Yurt1 2025-07-15\\_14:00 2025-07-15\\_18:00 –ê–π–≥“Ø–ª +77001234567 –¢—É“ì–∞–Ω –∫“Ø–Ω–≥–µ ‚Äì –±—Ä–æ–Ω—å “õ–æ—Å—É\n"
            "/delete\\_booking 2 ‚Äì ID –∞—Ä“õ—ã–ª—ã –±—Ä–æ–Ω—å –∂–æ—é\n"
            "/edit\\_booking 2 ‚Äì ID –∞—Ä“õ—ã–ª—ã –±—Ä–æ–Ω—å–¥—ã ”©“£–¥–µ—É\n"
            "/list\\_bookings ‚Äì –±–∞—Ä–ª—ã“õ –±—Ä–æ–Ω—å–¥–∞—Ä–¥—ã –∫”©—Ä—É\n"
            "/next\\_available ‚Äì –∫–µ–ª–µ—Å—ñ –±–æ—Å —É–∞“õ—ã—Ç—Ç–∞—Ä\n"
            "/availability ‚Äì –±–∞—Ä–ª—ã“õ –±—Ä–æ–Ω—å–¥–∞—Ä\n"
        )
    else:
        return (
            "–°”ô–ª–µ–º! –ë“±–ª ‚Äì –ö–∏—ñ–∑ “Æ–π –ë—Ä–æ–Ω–¥–∞—É –ë–æ—Ç üòä\n\n"
            "üì¶ “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n"
            "/availability ‚Äì –±—Ä–æ–Ω—å–¥–∞—Ä —Ç—ñ–∑—ñ–º—ñ\n"
            "/next\\_available ‚Äì –∫–µ–ª–µ—Å—ñ –±–æ—Å —É–∞“õ—ã—Ç—Ç—ã –∫”©—Ä—É\n"
            "/request\\_booking ‚Äì –±—Ä–æ–Ω—å —Å“±—Ä–∞—É\n"
            "/help ‚Äì –∫”©–º–µ–∫ –º”ô–∑—ñ—Ä—ñ\n\n"
            "–ë—Ä–æ–Ω—å –∂–∞—Å–∞—É “Ø—à—ñ–Ω –±—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: \\+7 700 123 45 67"
        )
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = get_help_text(user_id)
    await update.message.reply_text(text, parse_mode="Markdown")
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = get_help_text(user_id)
    await update.message.reply_text(text, parse_mode="Markdown")
async def availability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = get_availability()
    await update.message.reply_text(text)
async def add_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –°—ñ–∑–¥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ.")
        return

    try:
        args = context.args
        yurt = args[0]
        start = args[1].replace("_", " ")
        end = args[2].replace("_", " ")
        name = args[3]
        phone = args[4]
        notes = " ".join(args[5:]) if len(args) > 5 else ""
        add_booking(yurt, start, end, name, phone, notes)
        await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå “ö–∞—Ç–µ: {e}\n–ü—ñ—à—ñ–º:\n/add_booking Yurt1 2025-07-15_14:00 2025-07-15_18:00 –ê–π–≥“Ø–ª +77001234567 –¢—É“ì–∞–Ω –∫“Ø–Ω–≥–µ")
async def delete_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –°—ñ–∑–¥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ.")
        return

    try:
        booking_id = context.args[0]
        result = delete_booking_by_id(booking_id)
        if result:
            await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å –∂–æ–π—ã–ª–¥—ã.")
        else:
            await update.message.reply_text("‚ùå –ú“±–Ω–¥–∞–π ID —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    except Exception as e:
        await update.message.reply_text(f"“ö–∞—Ç–µ: {e}\n–ü—ñ—à—ñ–º:\n/delete_booking 2")
async def list_bookings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã —Ç–µ–∫ –∞–¥–º–∏–Ω “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞–¥—ã.")
        return

    text = list_bookings()
    await update.message.reply_text(text)
async def next_available_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = get_next_available()
    await update.message.reply_text(text)
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id == ADMIN_ID:
        text = (
            "üõ† *–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã*:\n\n"
            "/add_booking Yurt1 2025-07-15_14:00 2025-07-15_18:00 –ê–π–≥“Ø–ª +77001234567 –¢—É“ì–∞–Ω –∫“Ø–Ω–≥–µ ‚Äì –±—Ä–æ–Ω—å “õ–æ—Å—É\n"
            "/delete_booking 2 ‚Äì ID –∞—Ä“õ—ã–ª—ã –±—Ä–æ–Ω—å –∂–æ—é\n"
            "/list_bookings ‚Äì –±–∞—Ä–ª—ã“õ –±—Ä–æ–Ω—å–¥–∞—Ä–¥—ã –∫”©—Ä—É\n"
            "/edit\\_booking 2 ‚Äì ID –∞—Ä“õ—ã–ª—ã –±—Ä–æ–Ω—å–¥—ã ”©“£–¥–µ—É\n"
            "/next_available ‚Äì –∫–µ–ª–µ—Å—ñ –±–æ—Å —É–∞“õ—ã—Ç—Ç–∞—Ä\n"
            "/availability ‚Äì –±–∞—Ä–ª—ã“õ –±—Ä–æ–Ω—å–¥–∞—Ä\n"
        )
    else:
        text = (
            "üëã “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ë“±–ª –ö–∏—ñ–∑ “Æ–π –ë—Ä–æ–Ω–¥–∞—É –ë–æ—Ç.\n\n"
            "üì¶ “ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n"
            "/start ‚Äì –±–æ—Ç—Ç—ã –±–∞—Å—Ç–∞—É\n"
            "/availability ‚Äì –±—Ä–æ–Ω—å–¥–∞—Ä —Ç—ñ–∑—ñ–º—ñ\n"
            "/next_available ‚Äì –∫–µ–ª–µ—Å—ñ –±–æ—Å —É–∞“õ—ã—Ç—Ç—ã –∫”©—Ä—É\n"
            "/help ‚Äì –æ—Å—ã –∫”©–º–µ–∫ –º”ô–∑—ñ—Ä—ñ\n\n"
            "–ï–≥–µ—Ä —Å—ñ–∑–≥–µ –±—Ä–æ–Ω—å –∂–∞—Å–∞—É “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞, –±—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: +7 700 123 45 67"
        )

    await update.message.reply_text(text, parse_mode="Markdown")
async def request_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 6:
            raise ValueError("–ü—ñ—à—ñ–º “õ–∞—Ç–µ")

        yurt = args[0]
        start = args[1].replace("_", " ")
        end = args[2].replace("_", " ")
        name = args[3]
        phone = args[4]
        notes = " ".join(args[5:])

        # “ö–æ–ª–¥–∞–Ω—É—à—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
        user = update.message.from_user
        requester = f"{user.first_name} (@{user.username})" if user.username else user.first_name

        message = (
            f"üì• *–ñ–∞“£–∞ –±—Ä–æ–Ω—å —Å“±—Ä–∞–Ω—ã—Å—ã!*\n\n"
            f"üë§ “ö–æ–ª–¥–∞–Ω—É—à—ã: {requester}\n"
            f"üèï –ö–∏—ñ–∑ “Ø–π: {yurt}\n"
            f"üìÖ –ö“Ø–Ω–¥–µ—Ä: {start} ‚Äì {end}\n"
            f"üë§ –ï—Å—ñ–º—ñ: {name}\n"
            f"üìû –¢–µ–ª: {phone}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}\n"
        )

        # 1. “ö–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ä–∞—Å—Ç–∞—É
        await update.message.reply_text("‚úÖ –°“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –ê–¥–º–∏–Ω —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω–¥–∞ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–¥—ã!")

        # 2. –ê–¥–º–∏–Ω–≥–µ –∂–æ–ª–¥–∞—É
        await context.bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(
            f"‚ùå “ö–∞—Ç–µ: {e}\n\n"
            "–ü–∞–π–¥–∞–ª–∞–Ω—É –º—ã—Å–∞–ª—ã:\n"
            "/request_booking Yurt1 2025-07-15_14:00 2025-07-15_18:00 –ù“±—Ä–ª–∞–Ω +77001112233 –î–æ—Å—Ç–∞—Ä–º–µ–Ω –¥–µ–º–∞–ª—ã—Å"
        )
async def edit_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –°—ñ–∑–¥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞–Ω—ã –æ—Ä—ã–Ω–¥–∞—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ.")
        return

    try:
        args = context.args
        if len(args) < 3:
            raise ValueError("–ü—ñ—à—ñ–º “õ–∞—Ç–µ")

        booking_id = args[0]
        field = args[1]
        new_value = " ".join(args[2:]).replace("_", " ")

        allowed_fields = ["Yurt", "StartDate", "EndDate", "ClientName", "Phone", "Notes"]
        if field not in allowed_fields:
            await update.message.reply_text("‚ùå “ö–∞—Ç–µ: –ú“±–Ω–¥–∞–π ”©—Ä—ñ—Å –∂–æ“õ. –¢”©–º–µ–Ω–¥–µ–≥—ñ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ “ì–∞–Ω–∞ ”©–∑–≥–µ—Ä—Ç–µ –∞–ª–∞—Å—ã–∑:\n" + ", ".join(allowed_fields))
            return

        result = edit_booking(booking_id, field, new_value)
        if result:
            await update.message.reply_text("‚úÖ ”®–∑–≥–µ—Ä—ñ—Å —Å”ô—Ç—Ç—ñ –∂–∞—Å–∞–ª–¥—ã.")
        else:
            await update.message.reply_text("‚ùå –ú“±–Ω–¥–∞–π ID —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    except Exception as e:
        await update.message.reply_text(
            f"“ö–∞—Ç–µ: {e}\n"
            "–ü–∞–π–¥–∞–ª–∞–Ω—É –º—ã—Å–∞–ª—ã:\n"
            "/edit_booking 3 Phone +77009998877"
        )
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("availability", availability))
app.add_handler(CommandHandler("add_booking", add_booking_handler))
app.add_handler(CommandHandler("delete_booking", delete_booking_handler))
app.add_handler(CommandHandler("edit_booking", edit_booking_handler))
app.add_handler(CommandHandler("list_bookings", list_bookings_handler))
app.add_handler(CommandHandler("next_available", next_available_handler))
app.add_handler(CommandHandler("help", help_handler))
app.add_handler(CommandHandler("request_booking", request_booking_handler))

app.run_polling()
